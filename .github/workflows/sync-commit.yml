name: Sync to Main

on:
  push:
    branches:
      - dev

jobs:
  create-or-update-pull-request:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Fetch commit messages
        id: fetch_commits
        run: |
          echo "commits=$(git log --pretty=format:'%h - %s' origin/main..HEAD)" >> $GITHUB_ENV
          echo "committer=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV

      - name: Create or update pull request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { getOctokit, context } = require('@actions/github');
            const core = require('@actions/core');
            const octokit = getOctokit(core.getInput('github-token'));

            const { owner, repo } = context.repo;
            const base = 'main';
            const head = 'dev';
            const commits = process.env.commits.split('\n').map(commit => `- ${commit}`).join('\n');
            const committer = process.env.committer;

            async function run() {
              const { data: existingPRs } = await octokit.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${head}`,
                base,
                state: 'open',
              });

              if (existingPRs.length > 0) {
                const pr = existingPRs[0];
                await octokit.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: pr.number,
                  body: `${pr.body}\n\n${commits}`
                });
              } else {
                await octokit.rest.pulls.create({
                  owner,
                  repo,
                  title: 'Sync dev to main',
                  head,
                  base,
                  body: commits
                });
              }
            }

            run().catch(error => {
              core.setFailed(error.message);
            });
